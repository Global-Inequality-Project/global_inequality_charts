
// Wait for window to be ready
jQuery(function () {
  prepare_climate_vulnerability_world_map();
});


// Import data and render chart interface
// Make sure to use the chart ID to creat unique function names
function prepare_climate_vulnerability_world_map() {
  loadCsv(`${window.charts_path}/climate_vulnerability_world_map/climate_vulnerability_world_map.csv`,
    function (error, treemap_data) {
      if (error === null) {
        window.chart_data['climate_vulnerability_world_map'] = [{
          name: "vulnerability",
          data: {}
        }]
        window.chart_data['climate_vulnerability_world_map'][0].data = fromCSV(treemap_data, ['string', 'number', 'number']);
        createChartInterface({
          chartID: "climate_vulnerability_world_map",
          renderFunc: render_climate_vulnerability_world_map,
        })
      } else {
        console.error(error)
      }
    });

}


// Render chart onto canvas
// Make sure to use the chart ID to creat unique function names
function render_climate_vulnerability_world_map(canvasID, modal) {
  let values = {};
  const legend = [
    {
      "color": "#e6e6e6",
      "name": "No data"
    },
    {
      "color": "#ffffbf",
      "name": "Less"
    },
    {
      "color": "#ffe98b",
      "name": ""
    },
    {
      "color": "#ffd358",
      "name": ""
    },
    {
      "color": "#ffa427",
      "name": ""
    },
    {
      "color": "#ff7916",
      "name": ""
    },
    {
      "color": "#ff3102",
      "name": ""
    },
    {
      "color": "#f60100",
      "name": ""
    },
    {
      "color": "#c8001a",
      "name": ""
    },
    {
      "color": "#81001f",
      "name": "More"
    }
  ]
  window.chart_data['climate_vulnerability_world_map'][0].data.forEach(element => {
    const countryCode = map_convertCountryAlphas3To2(element.iso)
    values[countryCode] = {
      vulnerability: element.vulnerability,
      quantile: element.quantile
    }

    values[countryCode]["color"] = legend[element.quantile + 1].color
  });
  setTimeout(function () {
    new svgMap({
      targetElementID: canvasID.replace("#", ""),
      colorMin: "#f5d993",
      data: {
        thousandSeparator: ".",
        data: {

          vulnerability: {
            name: 'Vulnerability Index',
            format: '{0}',
          },
          quantile: {
            name: 'quantile',
            format: ''
          }
        },
        applyData: 'quantile',
        values: values,
      },
      initialZoom:1.20,
      showZoomReset: true,
      showContinentSelector: true,
      initialPan: { x: 550, y: 160 },

    });
    map_createLegend(legend, canvasID)
  }, 400)

}